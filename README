NAME

  MooseX::Transactional - Transaction support for Moose objects

SYNOPSIS

    package MyFoo;
    use MooseX::Transactional;
    
    has foo => (
        is        => 'rw',
        isa       => 'Str',
    );
    
    sub TRANSACTION {
        my ($self, $saved_data) = @_;
        printf "transaction start for %s\n", ref $self;
    }
    
    sub COMMIT {
        my ($self, $saved_data) = @_;
        printf "committing %s\n", ref $self;
    }
    
    sub ROLLBACK {
        my ($self, $saved_data) = @_;
        printf "rolling back %s\n", ref $self;
    }
    
    1;

  And then later:

    #!/usr/bin/env perl
    use strict;
    use warnings;
    
    use MooseX::Transactional::Util qw( transaction );
    use MyFoo;
    
    my $foo = MyFoo->new(foo => 23);
    printf "before transaction: foo is now %s\n", $foo->foo;
    
    transaction {
        $foo->foo(17);
        printf "in transaction: foo is now %s\n", $foo->foo;
    };
    printf "after transaction: foo is now %s\n", $foo->foo;
    
    eval {
        transaction {
            $foo->foo(616);
            printf "in failing transaction: foo is now %s\n", $foo->foo;
            die "some error\n";
        };
    };
    printf "after failing transaction: foo is now %s\n", $foo->foo;
    
    __END__
    before transaction: foo is now 23
    transaction start for MyFoo
    in transaction: foo is now 17
    committing MyFoo
    after transaction: foo is now 17
    transaction start for MyFoo
    in failing transaction: foo is now 616
    rolling back MyFoo
    after failing transaction: foo is now 17

DESCRIPTION

  Turns the importing class into a transactional object. You can create a
  new transaction scope via "transaction" in MooseX::Transactional::Util:

    use MooseX::Transactional::Util qw( transaction );
    
    my $foo = My::Transactional::Class->new;
    
    transaction {
        $foo->bar('baz');
        
        # other code...
    }

  The block will be wrapped in an eval. If an error occured, all
  transactional objects will be reset to their previous state and the error
  rethrown.

  If the transaction was completed without error, the objects will be
  committed and the associated stored data removed.

 Transaction Hook Methods

  Since you might want to allow transactional use of other resources (e.g.
  files or other kinds of data) there are three method hooks provided that
  will be called:

  TRANSACTION( Object $self, HashRef $cloned_data )
      Will be called when the object has been accessed and got bound to the
      transaction.

  COMMIT( Object $self, HashRef $cloned_data )
      This is called when the transaction has ended successfully.

  ROLLBACK( Object $self, HashRef $cloned_data )
      When an error occurred, this method will be called. This allows you to
      restore some other kind of resource that you previously stored in the
      data hash reference.

 Nested Transactions

  This module will manage a stack that allows you to nest your transaction
  scopes as you need them:

    my $foo = My::Transactional::Class->new(bar => 23);
    
    eval {
        transaction {
            $foo->bar(17);            # foo is now 17
    
            eval {
                transaction {
                    $foo->bar(777);   # foo is now 777
    
                    die "die";
                };
            };
    
            say $foo->bar;            # will say 17
            die "die";
        };
    };
    say $foo->bar;                    # will say 23

METHODS

 init_meta

  This method is provided for Moose::Exporter. It will initialise meta for
  the class using "MooseX::Transactional". The role
  MooseX::Transactional::Role::Meta::Class will be applied to the consumer
  class' meta class object.

  You shouldn't worry about this method as a user.

CAVEATS

  *   A dclone will be done on every fetch, store and delete magic.

  *   Only objects based on hash references are supported by now.

SEE ALSO

  MooseX::Transactional::Util, Moose, Variable::Magic, Storable

AUTHOR AND COPYRIGHT

  Robert 'phaylon' Sedlacek "<rs@474.at>"

LICENSE

  This program is free software; you can redistribute it and/or modify it
  under the same terms as perl itself.

